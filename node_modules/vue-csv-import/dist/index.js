(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash'), require('axios'), require('csv-parse')) :
  typeof define === 'function' && define.amd ? define(['exports', 'lodash', 'axios', 'csv-parse'], factory) :
  (factory((global['vue-csv-import'] = {}),null,null,null));
}(this, (function (exports,_,axios,parse) { 'use strict';

  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  axios = axios && axios.hasOwnProperty('default') ? axios['default'] : axios;
  parse = parse && parse.hasOwnProperty('default') ? parse['default'] : parse;

  //

  var script = {
    props: {
      value: Array,
      url: {
        type: String
      },
      mapFields: {
        required: true
      },
      callback: {
        type: Function,
        default: function (response) {
        }
      },
      catch: {
        type: Function,
        default: function (response) {
        }
      },
      finally: {
        type: Function,
        default: function (response) {
        }
      },
      loadBtnText: {
        type: String,
        default: "Submit"
      },
      submitBtnText: {
        type: String,
        default: "Submit"
      },
      tableClass: {
        type: String,
        default: "table"
      },
      checkboxClass: {
        type: String,
        default: "form-check-input"
      },
      buttonClass: {
        type: String,
        default: "btn btn-default"
      },
      inputClass: {
        type: String,
        default: "form-control-file"
      }
    },

    data: function () { return ({
      form: {
        csv: null,
      },
      fieldsToMap: [],
      map: {},
      hasHeaders: true,
      csv: null,
      sample: null,
    }); },

    created: function created() {
      if (_.isArray(this.mapFields)) {
        this.fieldsToMap = _.map(this.mapFields, function (item) {
          return {
            key: item,
            label: item
          };
        });
      } else {
        this.fieldsToMap = _.map(this.mapFields, function (label, key) {
          return {
            key: key,
            label: label
          };
        });
      }
    },

    methods: {
      submit: function submit() {
        var _this = this;
        this.form.csv = this.buildMappedCsv();

        this.$emit('input', this.form.csv);

        if (this.url) {
          axios.post(this.url, this.form).then(function (response) {
            _this.callback(response);
          }).catch(function (response) {
            _this.catch(response);
          }).finally(function (response) {
            _this.finally(response);
          });
        }
      },
      buildMappedCsv: function buildMappedCsv() {
        var _this = this;

        var csv = this.hasHeaders ? _.drop(this.csv) : this.csv;

        return _.map(csv, function (row) {
          var newRow = {};

          _.forEach(_this.map, function (column, field) {
            _.set(newRow, field, _.get(row, column));
          });

          return newRow;
        });
      },
      getSample: function getSample() {
        var _this = this;

        this.readFile(function (output) {
          parse(output, {to: 2}, function (err, output) {
            _this.sample = output;
          });
          parse(output, {}, function (err, output) {
            _this.csv = output;
          });
        });
      },
      readFile: function readFile(callback) {
        var file = this.$refs.csv.files[0];

        if (file) {
          var reader = new FileReader();

          reader.readAsText(file, "UTF-8");

          reader.onload = function (evt) {
            callback(evt.target.result);
          };

          reader.onerror = function (evt) {
            console.log("Error reading CSV");
          };
        }
      }
    },

    watch: {
      map: {
        handler: function (newVal) {
          if (!this.url) {
            var hasAllKeys = this.mapFields.every(function (item) {
              return newVal.hasOwnProperty(item);
            });

            if (hasAllKeys) {
              this.submit();
            }
          }
        },
        deep: true
      }
    },

    computed: {
      firstRow: function firstRow() {
        return _.get(this, "sample.0");
      },
      headers: function headers() {
        return _.get(this, "sample.0");
      }
    },
  };

  /* script */
              var __vue_script__ = script;
              
  /* template */
  var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"vue-csv-uploader"},[_c('div',{staticClass:"form"},[_c('div',{staticClass:"vue-csv-uploader-part-one"},[_c('div',{staticClass:"form-check"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.hasHeaders),expression:"hasHeaders"}],class:_vm.checkboxClass,attrs:{"type":"checkbox","id":"hasHeaders"},domProps:{"checked":Array.isArray(_vm.hasHeaders)?_vm._i(_vm.hasHeaders,null)>-1:(_vm.hasHeaders)},on:{"change":function($event){var $$a=_vm.hasHeaders,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.hasHeaders=$$a.concat([$$v]));}else{$$i>-1&&(_vm.hasHeaders=$$a.slice(0,$$i).concat($$a.slice($$i+1)));}}else{_vm.hasHeaders=$$c;}}}}),_c('label',{staticClass:"form-check-label",attrs:{"for":"hasHeaders"}},[_vm._v("\n                    File Has Headers\n                ")])]),_c('div',{staticClass:"form-group"},[_c('input',{ref:"csv",class:_vm.inputClass,attrs:{"type":"file","name":"csv"}})]),_c('div',{staticClass:"form-group"},[_c('input',{class:_vm.buttonClass,attrs:{"type":"submit"},domProps:{"value":_vm.loadBtnText},on:{"click":function($event){$event.preventDefault();return _vm.getSample($event)}}})])]),_c('div',{staticClass:"vue-csv-uploader-part-two"},[(_vm.sample)?_c('div',{staticClass:"vue-csv-mapping"},[_c('table',{class:_vm.tableClass},[_vm._m(0),_c('tbody',_vm._l((_vm.fieldsToMap),function(field){return _c('tr',[_c('td',[_vm._v(_vm._s(field.label))]),_c('td',[_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.map[field.key]),expression:"map[field.key]"}],staticClass:"form-control",on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.map, field.key, $event.target.multiple ? $$selectedVal : $$selectedVal[0]);}}},_vm._l((_vm.firstRow),function(column,key){return _c('option',{domProps:{"value":key}},[_vm._v(_vm._s(column))])}))])])}))]),(_vm.url)?_c('div',{staticClass:"form-group"},[_c('input',{class:_vm.buttonClass,attrs:{"type":"submit"},domProps:{"value":_vm.submitBtnText},on:{"click":function($event){$event.preventDefault();return _vm.submit($event)}}})]):_vm._e()]):_vm._e()])])])};
  var __vue_staticRenderFns__ = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('thead',[_c('tr',[_c('th',[_vm._v("Field")]),_c('th',[_vm._v("CSV Column")])])])}];

    /* style */
    var __vue_inject_styles__ = undefined;
    /* scoped */
    var __vue_scope_id__ = undefined;
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* component normalizer */
    function __vue_normalize__(
      template, style, script$$1,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      return component
    }
    /* style inject */
    function __vue_create_injector__() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (css.map) {
            // https://developer.chrome.com/devtools/docs/javascript-debugging
            // this makes source maps inside style tags work properly in Chrome
            code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
            // http://stackoverflow.com/a/26603875
            code +=
              '\n/*# sourceMappingURL=data:application/json;base64,' +
              btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
              ' */';
          }

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var VueCsvImport = __vue_normalize__(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      __vue_create_injector__,
      undefined
    );

  exports.VueCsvImport = VueCsvImport;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
